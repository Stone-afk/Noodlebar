// Code generated by MockGen. DO NOT EDIT.
// Source: ./type.go
//
// Generated by this command:
//
//	mockgen -source=./type.go -destination=../../../../mocks/knowledge_base.mock.go -package=aimocks -typed=true RepositoryBaseSvc
//

// Package aimocks is a generated GoMock package.
package aimocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ecodeclub/webook/internal/ai/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryBaseSvc is a mock of RepositoryBaseSvc interface.
type MockRepositoryBaseSvc struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryBaseSvcMockRecorder
	isgomock struct{}
}

// MockRepositoryBaseSvcMockRecorder is the mock recorder for MockRepositoryBaseSvc.
type MockRepositoryBaseSvcMockRecorder struct {
	mock *MockRepositoryBaseSvc
}

// NewMockRepositoryBaseSvc creates a new mock instance.
func NewMockRepositoryBaseSvc(ctrl *gomock.Controller) *MockRepositoryBaseSvc {
	mock := &MockRepositoryBaseSvc{ctrl: ctrl}
	mock.recorder = &MockRepositoryBaseSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryBaseSvc) EXPECT() *MockRepositoryBaseSvcMockRecorder {
	return m.recorder
}

// UploadFile mocks base method.
func (m *MockRepositoryBaseSvc) UploadFile(ctx context.Context, file domain.KnowledgeBaseFile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockRepositoryBaseSvcMockRecorder) UploadFile(ctx, file any) *MockRepositoryBaseSvcUploadFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockRepositoryBaseSvc)(nil).UploadFile), ctx, file)
	return &MockRepositoryBaseSvcUploadFileCall{Call: call}
}

// MockRepositoryBaseSvcUploadFileCall wrap *gomock.Call
type MockRepositoryBaseSvcUploadFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryBaseSvcUploadFileCall) Return(arg0 error) *MockRepositoryBaseSvcUploadFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryBaseSvcUploadFileCall) Do(f func(context.Context, domain.KnowledgeBaseFile) error) *MockRepositoryBaseSvcUploadFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryBaseSvcUploadFileCall) DoAndReturn(f func(context.Context, domain.KnowledgeBaseFile) error) *MockRepositoryBaseSvcUploadFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
