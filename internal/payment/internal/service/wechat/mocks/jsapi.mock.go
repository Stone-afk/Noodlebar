// Code generated by MockGen. DO NOT EDIT.
// Source: ./jsapi.go
//
// Generated by this command:
//
//	mockgen -source=./jsapi.go -package=wechatmocks -destination=./mocks/jsapi.mock.go -typed JSAPIService
//

// Package wechatmocks is a generated GoMock package.
package wechatmocks

import (
	context "context"
	reflect "reflect"

	core "github.com/wechatpay-apiv3/wechatpay-go/core"
	payments "github.com/wechatpay-apiv3/wechatpay-go/services/payments"
	jsapi "github.com/wechatpay-apiv3/wechatpay-go/services/payments/jsapi"
	gomock "go.uber.org/mock/gomock"
)

// MockJSAPIService is a mock of JSAPIService interface.
type MockJSAPIService struct {
	ctrl     *gomock.Controller
	recorder *MockJSAPIServiceMockRecorder
	isgomock struct{}
}

// MockJSAPIServiceMockRecorder is the mock recorder for MockJSAPIService.
type MockJSAPIServiceMockRecorder struct {
	mock *MockJSAPIService
}

// NewMockJSAPIService creates a new mock instance.
func NewMockJSAPIService(ctrl *gomock.Controller) *MockJSAPIService {
	mock := &MockJSAPIService{ctrl: ctrl}
	mock.recorder = &MockJSAPIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJSAPIService) EXPECT() *MockJSAPIServiceMockRecorder {
	return m.recorder
}

// Prepay mocks base method.
func (m *MockJSAPIService) Prepay(ctx context.Context, req jsapi.PrepayRequest) (*jsapi.PrepayResponse, *core.APIResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepay", ctx, req)
	ret0, _ := ret[0].(*jsapi.PrepayResponse)
	ret1, _ := ret[1].(*core.APIResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Prepay indicates an expected call of Prepay.
func (mr *MockJSAPIServiceMockRecorder) Prepay(ctx, req any) *MockJSAPIServicePrepayCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepay", reflect.TypeOf((*MockJSAPIService)(nil).Prepay), ctx, req)
	return &MockJSAPIServicePrepayCall{Call: call}
}

// MockJSAPIServicePrepayCall wrap *gomock.Call
type MockJSAPIServicePrepayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJSAPIServicePrepayCall) Return(resp *jsapi.PrepayResponse, result *core.APIResult, err error) *MockJSAPIServicePrepayCall {
	c.Call = c.Call.Return(resp, result, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJSAPIServicePrepayCall) Do(f func(context.Context, jsapi.PrepayRequest) (*jsapi.PrepayResponse, *core.APIResult, error)) *MockJSAPIServicePrepayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJSAPIServicePrepayCall) DoAndReturn(f func(context.Context, jsapi.PrepayRequest) (*jsapi.PrepayResponse, *core.APIResult, error)) *MockJSAPIServicePrepayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryOrderByOutTradeNo mocks base method.
func (m *MockJSAPIService) QueryOrderByOutTradeNo(ctx context.Context, req jsapi.QueryOrderByOutTradeNoRequest) (*payments.Transaction, *core.APIResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryOrderByOutTradeNo", ctx, req)
	ret0, _ := ret[0].(*payments.Transaction)
	ret1, _ := ret[1].(*core.APIResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryOrderByOutTradeNo indicates an expected call of QueryOrderByOutTradeNo.
func (mr *MockJSAPIServiceMockRecorder) QueryOrderByOutTradeNo(ctx, req any) *MockJSAPIServiceQueryOrderByOutTradeNoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOrderByOutTradeNo", reflect.TypeOf((*MockJSAPIService)(nil).QueryOrderByOutTradeNo), ctx, req)
	return &MockJSAPIServiceQueryOrderByOutTradeNoCall{Call: call}
}

// MockJSAPIServiceQueryOrderByOutTradeNoCall wrap *gomock.Call
type MockJSAPIServiceQueryOrderByOutTradeNoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJSAPIServiceQueryOrderByOutTradeNoCall) Return(resp *payments.Transaction, result *core.APIResult, err error) *MockJSAPIServiceQueryOrderByOutTradeNoCall {
	c.Call = c.Call.Return(resp, result, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJSAPIServiceQueryOrderByOutTradeNoCall) Do(f func(context.Context, jsapi.QueryOrderByOutTradeNoRequest) (*payments.Transaction, *core.APIResult, error)) *MockJSAPIServiceQueryOrderByOutTradeNoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJSAPIServiceQueryOrderByOutTradeNoCall) DoAndReturn(f func(context.Context, jsapi.QueryOrderByOutTradeNoRequest) (*payments.Transaction, *core.APIResult, error)) *MockJSAPIServiceQueryOrderByOutTradeNoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
